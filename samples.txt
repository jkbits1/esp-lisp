-- list and a function
(+ 2 3)

(1 2 3 4)

(define xs '(1 2 3 4))
(define ys '(5 6 7 8))

(drop 1 xs)

(take 2 xs)

-- rotate
(append (drop 1 xs) (take 1 xs))

(define zip (lambda (xs ys) (cond ((eq (car xs) nil) nil) ((eq (car ys) nil) nil) (t (cons (list (car xs) (car ys)) (zip (cdr xs) (cdr ys) ))))))

(zip xs ys)

(mapcar + (zip xs ys))

(define plus (lambda (xs) (+ (car xs) (car (cdr xs)))  ))

(plus '(1 2))

(mapcar plus (zip xs ys))

wheels

(drop 2 wheels)

button 2
(list (rotDisp) (showDisp))

button 4
(list (loopCurWheel) (showDisp))
